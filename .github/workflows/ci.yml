name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.10'

jobs:
  test-backend:
    runs-on: ubuntu-latest
    name: Test Backend

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: ${{ runner.os }}-pip-

    - name: Install & Test Backend
      run: |
        cd backend
        pip install -r requirements.txt
        python -m pytest tests/ -v --cov=app --cov-report=xml

    - name: Upload Coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  test-frontend:
    runs-on: ubuntu-latest
    name: Test Frontend

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install & Test Frontend
      run: |
        cd frontend
        npm ci
        npm run test:coverage
        npm run build

  test-mobile:
    runs-on: ubuntu-latest
    name: Test Mobile

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: mobile/package-lock.json

    - name: Install & Test Mobile
      run: |
        cd mobile
        npm ci
        npm test

  lint:
    runs-on: ubuntu-latest
    name: Lint Code

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node & Python
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Python Setup
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install All Dependencies
      run: |
        cd frontend && npm ci && cd ..
        cd backend && pip install flake8 black isort && cd ..

    - name: Lint Frontend
      run: |
        cd frontend
        npm run lint

    - name: Lint Backend
      run: |
        cd backend
        flake8 app/ --max-line-length=88 --extend-ignore=E203,W503
        black --check app/
        isort --check-only app/

  security:
    runs-on: ubuntu-latest
    name: Security Scan

    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Scan Report
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  notify:
    needs: [test-backend, test-frontend, test-mobile, lint, security]
    runs-on: ubuntu-latest
    name: Notify Slack
    if: always()

    steps:
    - name: Send Slack Notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#ytsbyai-ci'
        webhook_url: "https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXX"
        text: |
          üöÄ CI/CD Pipeline Status: *${{ job.status }}*
          üß† Repo: `${{ github.repository }}`
          üåø Branch: `${{ github.ref_name }}`
          üîó Commit: `${{ github.sha }}`
          üë§ By: `${{ github.actor }}`
          üîÅ Run: `${{ github.run_id }}`
      env:
        SLACK_WEBHOOK_URL: "https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXX"
