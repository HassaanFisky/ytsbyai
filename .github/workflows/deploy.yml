name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  BACKEND_IMAGE: ytsbyai-backend
  FRONTEND_IMAGE: ytsbyai-frontend
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}

jobs:
  # Lint and Test
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]
        node-version: [18]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install Python dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio black flake8

    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm ci

    - name: Lint Python code
      run: |
        cd backend
        black --check .
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Lint TypeScript code
      run: |
        cd frontend
        npm run lint

    - name: Run Python tests
      run: |
        cd backend
        pytest tests/ -v --cov=app --cov-report=xml
      env:
        NEO4J_URI: ${{ secrets.NEO4J_URI }}
        NEO4J_USER: ${{ secrets.NEO4J_USER }}
        NEO4J_PASSWORD: ${{ secrets.NEO4J_PASSWORD }}
        PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
        PINECONE_ENVIRONMENT: ${{ secrets.PINECONE_ENVIRONMENT }}
        PINECONE_INDEX_NAME: ${{ secrets.PINECONE_INDEX_NAME }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    - name: Run TypeScript tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  # Build and Push Docker Images
  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.DOCKER_USERNAME }}/${{ env.BACKEND_IMAGE }}, ${{ env.REGISTRY }}/${{ env.DOCKER_USERNAME }}/${{ env.FRONTEND_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build and push Backend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.backend
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.frontend
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Render
  deploy-backend:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'

    steps:
    - name: Deploy Backend to Render
      run: |
        curl -X POST "https://api.render.com/v1/services/${{ secrets.RENDER_BACKEND_SERVICE_ID }}/deploys" \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{
            "clearCache": "do_not_clear"
          }'

    - name: Wait for Backend deployment
      run: |
        echo "Waiting for backend deployment to complete..."
        sleep 60

  deploy-frontend:
    needs: [build, deploy-backend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'

    steps:
    - name: Deploy Frontend to Render
      run: |
        curl -X POST "https://api.render.com/v1/services/${{ secrets.RENDER_FRONTEND_SERVICE_ID }}/deploys" \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{
            "clearCache": "do_not_clear"
          }'

    - name: Wait for Frontend deployment
      run: |
        echo "Waiting for frontend deployment to complete..."
        sleep 60

  # Health Check
  health-check:
    needs: [deploy-backend, deploy-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'

    steps:
    - name: Check Backend Health
      run: |
        echo "Checking backend health..."
        sleep 30
        curl -f ${{ secrets.BACKEND_URL }}/health || exit 1

    - name: Check Frontend Health
      run: |
        echo "Checking frontend health..."
        sleep 30
        curl -f ${{ secrets.FRONTEND_URL }}/api/health || exit 1

    - name: Notify deployment success
      if: success()
      run: |
        echo "âœ… Deployment completed successfully!"
        echo "Backend: ${{ secrets.BACKEND_URL }}"
        echo "Frontend: ${{ secrets.FRONTEND_URL }}"

  # Rollback on failure
  rollback:
    needs: [deploy-backend, deploy-frontend, health-check]
    runs-on: ubuntu-latest
    if: failure() && (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch')

    steps:
    - name: Rollback Backend
      run: |
        echo "ðŸš¨ Rolling back backend deployment..."
        curl -X POST "https://api.render.com/v1/services/${{ secrets.RENDER_BACKEND_SERVICE_ID }}/deploys" \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{
            "clearCache": "do_not_clear"
          }'

    - name: Rollback Frontend
      run: |
        echo "ðŸš¨ Rolling back frontend deployment..."
        curl -X POST "https://api.render.com/v1/services/${{ secrets.RENDER_FRONTEND_SERVICE_ID }}/deploys" \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{
            "clearCache": "do_not_clear"
          }'

    - name: Notify rollback
      run: |
        echo "ðŸ”„ Rollback completed. Please check the deployment logs." 